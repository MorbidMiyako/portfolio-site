wanted to build site using TDD 

started by creating a figma design

created react app

cleaned up react app

added notes and blog files to help document process

set up jest

set up general test for jest

wrote out general setup for tests

implemented general setup for tests in app.test.js

build out general page tests
1) background checks if styling is present, might have to be edited to allow
for styling updates
2) stars function will render a random array of "stars" by unmounting and this
should prove to be a different array
3) the viewport scrollheight will be tested on the button, making the test
redundant

build front page tests
n) used childNodes on the div containing the frontpage text to reduce the
amount of testid's and focus on the structure at the same time

whilst working on the tests for the social div i noticed a few things from the
figma document i forgot to implement, and made some edits to the notes.txt

wrote comments depicting where changes would have to be made, referring to the
notes.txt

wrote the test checking the social buttons, focused on checking the same
source and if the correct link was attached, along with if the new page was
openened in a new tab automatically.

when writing the test to check if the correct function was attached to the
down button I ran into quite a struggle. First I looked around for a while
looking to find a function that would help me, since toHaveAttribute was
insufficient. 
This, however, was fruitless since the function called was anonymous and didnt
even show up on the HTML. 
This meant I had to find a different way, I decided to console.log the
element, to see what information was on the object.
The object did have the function on it, but the key to access it was randomly
generated.
This mean I had to request the array of keys on the object, and select the 2nd
key (which housed the value containing the function)
From here I navigated further into the object until I managed to pull out the
function. However I wanted to make sure it had the correct function attached
to it, and by turning the object into a string it gave the whole function in
string format, allowing toStrictEqual the function with the function imported
into the testfile.

quick comment regarding the createStarsFunction, this function is never loaded
into the DOM, but runs in the background, this means only its effects can be
measured, not the presence of the function itself.

writing the tests for the projects section made me realise i was unsure about
the setup of the whole div. were the projects with their link going to be
children of a div containing them, or were they going to be sibblings of other
projects and their links? 
in the notes.txt i wrote down the new structure, and wrote out a new test
setup

while writing the test following the test setup, decided to test if logo's
were properly wrapped in a tags too.

finished writing the lasts test, in order to test each projectDiv i decided to
use a for loop, starting at the second div (due to the first div being the
title)

in order to test if the child of the p tag was an a tag i had to add a new
testId since chaining too many child nodes caused the elemnt to register as
null.

commited the tests to the tests branch and merged the branch into master
before cleaning up the branch

set up branch webdev to start creating the website itself, after making all
the tests past i will develop the functions used. next i will finish by
creating the aditional styling.

made quick change to general test, changed regex into string

set up general structure, added logo files and dummy functions at the right
location to ensure the test suite would run

while going trough the tests I noticed i didnt implement the tests for
presence of the divs inside the main div

quickly added the tests, and commited the structure and updated tests

the general tests all pass, Create stars got its general setup worked out in
order to make it pass.
the function will create an array with stars, each having random styling
variables within a certain margin. these stylings will then be applied to the
generated stars. 

applied a very simple styling: text color white. simply to allow to see the
text output haha, with the black background and all

the front page tests all pass, if it wasnt for the test i would have forgotten
the target and rel attributes to ensure a new tab would be opened

added a small comment to the test file

while getting the about page tests to pass, I noticed I left in some enters
between the sections of the about text when copying in the text i wrote. Thus
had to make a small adjustment to the test

the about page tests all pass

small typo in the test for the first div, h3 had to be h2 so fixed the typo

noticed i didnt include a test for the project links to open in a new tab, so
quickly included them.

got all the tests to pass, moving on to writin the create stars function next

got the create stars to create random stars at random positions, flickering at
different speeds. Spend quite a long time tweaking the animation, speed and
size to an acceptable point.

got the scrolling function to work easily, but in order to let the test pass I
would have to directly reference the function without arguments. The function
needed ref however, and this caused problems with the test. Resulting in sadly
having to change the test in the end...
It still tests if the function is on the button, however sadly it doesnt test
as literally as before.

spend a good chunck of time trying different options to automatically scroll
to the top when scrollY had a certain value. However I wasn't content with the
scroll speed, nor with the page scrolling up when one scrolled up possibly a
bit too far. It removed too much freedom, even if I managed to create a
desired speed.

Finally I spent a while on styling, making some changes compared to the Figma
design, creating more segments etc. Made some small tweaks to the tests to
prepare for the to be made deviations.
